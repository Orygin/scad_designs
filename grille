
RENDALL=false;

PRINTHH=true;
PRINTGRID=true;
PRINTHEX=true;
PRINTREFGRID=true;
PRINTPLUG=true;
PRINTCONNECTOR=true;

overall_length=810;
overall_width=415;
overall_height=10;

HHW=850;
HHH=455;
HHD=400;
HHPly=20;

border_margin=HHPly;
panel_margin=6;

panel_height=2.2;

posL=1;
posW=2;
tileL=(HHW+(2*panel_margin))/4;
tileW=(HHH+(2*panel_margin))/2;

fitMargin=0.15;


lipHeight=12;
$fn =80;


module grillefull(posW,posL){

// Sides

difference(){
    translate([-panel_margin, -panel_margin,0])
    cube([HHW+2*panel_margin, HHH+2*panel_margin, panel_height]);
    
          
    translate([border_margin,border_margin,-1]) 
        cube([HHW-(border_margin*2),
          HHH-(border_margin*2),
          HHD+2]);
}

// Top panel
if(PRINTHEX){

    translate([-3.5,0, 0])
    linear_extrude(height=panel_height)
    {
      lattice(72, 160, 5, 5*1.4);
    }
}
if(PRINTCONNECTOR){
    connector(posW,posL);
    }

    //topPanel();

hole_size=3.6; // best 3.5
hole_distance=1.2;
holesPerL=overall_length/(hole_size+(hole_distance*2));
holesPerW=overall_width/(hole_size+(hole_distance*2));

module topPanel(){
    /*difference(){
        cube([overall_length, overall_width, panel_height]);
        for(i = [0:holesPerL]){
           for(j = [0:holesPerW]){
               translate([i*(hole_size+(hole_distance*2)),
                          j*(hole_size+(hole_distance*2)), 0])
                cube(hole_size);
           }
        }
    }*/
    union(){
        for(i = [0:holesPerL]){
            translate([i*(hole_size+(hole_distance*2)),0, 0])
            cube([hole_distance, overall_width, panel_height]);
        }
        for(j = [0:holesPerW]){
                    translate([0,
                      j*(hole_size+(hole_distance*2)), 0])
            cube([overall_length, hole_distance, panel_height]);
        }
    }
}
}

module rend(all){

    if(all == true){
        for(posL=[0:3]){
            for(posW=[0:1]){
            printGrid(posW,posL);
            }
        }
   } else {
    printGrid(posW,posL);
   }
}

module printGrid(posW,posL){

intersection(){
    union(){
        difference(){
            grillefull(posW,posL);
            translate([0,0, -HHD]) HHCorners(4, 8);
            //connector(posW,posL);
        }
    }

    
    translate([(posL*tileL)-panel_margin,(posW*tileW)-panel_margin, -60])
    cube([tileL,tileW,80]);
}

}
//connector(posW,posL);


//    connector(posW,posL);



module connector(posW, posL){
// Print lips
    if(posL==0){
        translate([-6-fitMargin, posW*(tileW)-panel_margin, -lipHeight])
        cube([6,tileW+panel_margin, lipHeight]);
    } else if (posL ==3){
        translate([HHW+fitMargin, posW*(tileW)-panel_margin, -lipHeight])
        cube([HHW,tileW+panel_margin, lipHeight]);
    }
    if(posW==0){
      translate([posL*tileL-panel_margin, -6-fitMargin, -lipHeight])
        cube([tileL, 6, lipHeight]);
    } else {
      translate([posL*tileL-panel_margin, HHH+fitMargin, -lipHeight])
        cube([tileL, 6, lipHeight]);
    }
    
    /*
if(posW==0){
    if(posL==0){
        connector00();
    }else if(posL==1){
        connector10();
    }else if(posL==2){
        connector20();
    }else if(posL==3){
        connector30();
    }
}else{
    if(posL==0){
        connector01();
    }else if(posL==1){
        connector11();
    }else if(posL==2){
        connector21();
    }else if(posL==3){
        connector31();
    }
}*/
}

connSideWidth=20;
connSideHeight=overall_height-4;
connSideDepth=4;
connSidePos=1;

module connector00(){
    translate([0, 0, -lipHeight])
    cube([6,tileW, lipHeight]);
    
}
module connector01(){
    translate([0, tileW, -lipHeight])
    cube([6, tileW, lipHeight]);
}
module connector10(){
    translate([tileL-connSideWidth/2, 3, connSidePos])
        connectorSideFemale();
    translate([2*tileL-connSideWidth/2, 3, connSidePos])
        connectorSideFemale();
}
module connector11(){
    translate([1*tileL-connSideWidth/2, overall_width-connSideDepth-3, connSidePos])
        connectorSideFemale();
    translate([2*tileL-connSideWidth/2, overall_width-connSideDepth-3, connSidePos])
        connectorSideFemale();
}
module connector20(){
    translate([2*tileL-connSideWidth/2, 3, connSidePos])
        connectorSideFemale();
    translate([3*tileL-connSideWidth/2, 3, connSidePos])
        connectorSideFemale();
}
module connector21(){
    translate([2*tileL-connSideWidth/2, overall_width-connSideDepth-3, connSidePos])
        connectorSideFemale();
    translate([3*tileL-connSideWidth/2, overall_width-connSideDepth-3, connSidePos])
        connectorSideFemale();
}
module connector30(){
    translate([3*tileL-connSideWidth/2, 3, connSidePos])
        connectorSideFemale();
    translate([4*tileL-connSideDepth-3, tileW+connSideWidth/2, connSidePos])
    rotate([0,0,270])
        connectorSideFemale();
    
}
module connector31(){
    translate([3*tileL-connSideWidth/2, overall_width-connSideDepth-3, connSidePos])
        connectorSideFemale();
    translate([4*tileL-connSideDepth-3, tileW+connSideWidth/2, connSidePos])
    rotate([0,0,270])
        connectorSideFemale();
}

module connector_side_male(){
    difference(){
        cube([connSideWidth, connSideDepth, connSideHeight]);
        // Screw hole
        connectorSideScrew();
    }
}
module connectorSideFemale(){
    cube([connSideWidth, connSideDepth, connSideHeight]);
    connectorSideScrew();
}
module connectorSideScrew(){
     rotate([90,0,0])
    translate([connSideWidth*3/4,connSideHeight/2,-connSideDepth*2])
        cylinder(20,2.5,2.5);
    rotate([90,0,0])
    translate([connSideWidth*1/4,connSideHeight/2,-connSideDepth*2])
        cylinder(20,2.5,2.5);
}

module HH() {
    //Main
    //translate([(overall_length-HHW)/2, (overall_width-HHH)/2, 0])
   /* difference(){
        cube([HHW,HHH,HHD]);
        translate([HHPly,HHPly, HHD-50])
        cube([HHW-HHPly*2,HHH-HHPly*2,51]);
    }
    
    speakerD=310;
    // 12 inch
    color([1,0,0])
    translate([(speakerD/2)+30+HHPly,HHH/2,2])
    cylinder(HHD-40, speakerD/2,speakerD/2);
    // 12 Inch
    color([1,0,0])
    translate([(speakerD*1.5)+35+HHPly,HHH/2,2])
    cylinder(HHD-40, speakerD/2,speakerD/2);
    // hole
    color([0,1,0])
    translate([HHW-50-HHPly-20,50+HHPly+20,2])
    cylinder(HHD-40, 50,50);
    */
    //corners
    HHCorners(0, 8);

}
module HHCorners(margin, corner){
    difference(){
        corners(margin);
        
        translate([10+margin/4, 10+margin/4, -10])
            cube([HHW-20-margin,HHH-20-margin,HHD+41]);

    }
    //round bottom left
    translate([10+margin/4, 10+margin/4, -10])
        cornerBorder(corner);
        
    //round bottom right
    translate([HHW-margin-10+margin/4, 10+margin/4, -10])
        rotate([0,0,90])
        cornerBorder(corner);
    //round top right
    translate([HHW-margin-10++margin/4, HHH-margin-10+margin/4, -10])
        rotate([0,0,180])
        cornerBorder(corner);

    //round top left
    translate([10+margin/4, HHH-margin-10+margin/4, -10])
        rotate([0,0,-90])
        cornerBorder(corner);

}
module corners(margin){
    cornerSize=100+margin;
    cornerHeight=20;
        translate([-6, -6, 0])
        cube([cornerSize,cornerSize,HHD+cornerHeight]);
        
        translate([(HHW)-cornerSize+6, -6, 0])
        cube([cornerSize,cornerSize,HHD+cornerHeight]);
        
        translate([-6, HHH-cornerSize+6, 0])
        cube([cornerSize,cornerSize,HHD+cornerHeight]);
        
        translate([(HHW)-cornerSize+6, HHH-cornerSize+6, 0])
        cube([cornerSize,cornerSize,HHD+cornerHeight]);
    }
    
    

module refgrid(){
color([0,0.5,0.8,.2]){
translate([-10, tileW-5,0])
cube([overall_length+20, 10, 100]);

translate([tileL-5,-10,0])
cube([10, overall_width+20, 100]);
translate([2*tileL-5,-10,0])
cube([10, overall_width+20, 100]);
translate([3*tileL-5,-10,0])
cube([10, overall_width+20, 100]);
}
}

module hexagon(radius)
{
  circle(r=radius,$fn=6);
}

module shell(radius, shell)
{
  difference()
  {
    hexagon(shell); // base
    hexagon(radius*1); // hole
  }
}

function column_to_offset(column, offset) = (column % 2) * offset;

module translate_to_hex(x_coord, y_coord, hex_width)
{
  translate([x_coord*hex_width*1.75, y_coord*hex_width*2+column_to_offset(x_coord, hex_width), 0])
  {
    children(0);
    //hexagon(hex_width);
  }
}

module lattice(rows, columns, hex_width, shell)
{
  for(x = [0:columns-1])
  {
    for(y = [0:rows-1])
    {
      translate_to_hex(x, y, hex_width)
      {
        shell(hex_width, shell);
      }
    }
  }
}

module printPlug(visual){
plug_height=panel_height+3;
plugD=15.5;
fitment=0.12;
    // Visual
    if(visual){
    difference(){
        linear_extrude(height=panel_height) lattice(7,7, 5, 7);
            
        //translate([16,-10,0]) cube([2,60,10]);
        //translate([-10,16,0]) cube([60,2,10]);
    }}
    
    // Plug
   /* difference(){
    
    translate([10.5,8,0])
    translate([7,7, -2])
    cylinder(plug_height, plugD, plugD, false, $fn =6);
    
    translate([5.5,0,0])
    linear_extrude(height=plug_height) lattice(5, 5, 5, 7+fitment);
    
    // text
    
    translate([10.5,8,-3.6])
    linear_extrude(2)
    text(str(fitment),6);
    }*/
    
    fitment=0.12;
    plugH=5-fitment;
    
    
    //cylinder(panel_height, 5, 5, false, $fn=6);
    difference(){

    union(){
    
    //cubes
        //translate([17.25,20,0]) 

        //
    translate([17.25,20,0]){
    cylinder(plug_height, 5, 5, false, $fn=6);
    
    translate([0,20,0]){
    cylinder(panel_height, 5, 5, false, $fn=6);
    
    cylinder(plug_height, plugH, plugH, false, $fn=6);
    }
    
    translate([26.5,5,0]){
//    cylinder(panel_height, 5, 5, false, $fn=6);
    cylinder(plug_height, plugH, plugH, false, $fn=6);
    }
    translate([26.5,25,0]){
    cylinder(panel_height, 5, 5, false, $fn=6);
    cylinder(plug_height, plugH, plugH, false, $fn=6);
    }
    }
    }
    
    // Fitment hex
        translate([0, 0, panel_height]) linear_extrude(height=3) lattice(7, 7, 5, 7+fitment);
    } //diff
    
    

}


if(PRINTHH == true){

translate([0,0,-400])
HH();
}


if(PRINTGRID){
color([0,.1,.1]) rend(RENDALL);
}
if(PRINTREFGRID){
refgrid();
}

if(PRINTPLUG){
translate([tileL-26.5-8.5,tileW-24-15,0])
intersection(){
printPlug(true);

    // Intersect with cube 
    translate([11,15,0]) cube([39,35,panel_height+3]);
    
}

}

module cornerBorder(cornerR){
    difference(){
        cube([cornerR,cornerR,HHD+30]);
        translate([cornerR,cornerR,0])
        cylinder(HHD+30, cornerR, cornerR, false);
    }
}
